problem link: https://leetcode.com/problems/delete-characters-to-make-fancy-string
solution: class Solution {
public:
    static string makeFancyString(string& s) {
        int n=s.size(), i=0;
        char prev='@';
        for(int len=0; char c: s){
            if (prev!=c) len=1;
            else len++;
            if (len<= 2) 
                s[i++]=c;
            prev=c;
            
        }
        s.resize(i);
        return s;
         
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/circular-sentence
solution:/**
 * @param {string} sentence
 * @return {boolean}
 */
const isCircularSentence = function(s) {
    s=s.split(' ')
    s.push(s[0])

    for (let i=0;i<s.length-1;i++){
        if(s[i].at(-1)!==s[i+1].at(0))return false
    }
    return true
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/rotate-string
solution: /**
 * @param {string} s
 * @param {string} goal
 * @return {boolean}
 */
var rotateString = function(s, goal) {
    if(s.length !== goal.length){
        return false;
    }
    return (s + s).includes(goal);
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/string-compression-iii
solution:class Solution {
public:
    static string compressedString(string& word) {
        int n=word.size(), l=0;
        string ans;
        ans.reserve(n);
        for(int r=0; r<n; ){
            while( r<n && word[r]==word[l]) r++;

            auto [q, rem]=div(r-l, 9);
            
            for(int i=0; i<q; i++){
                ans.push_back('9');
                ans.push_back(word[l]);
            }
            if (rem>0) {
                ans.push_back(rem+'0');
                ans.push_back(word[l]);
            }
            l=r;
        }
        return ans;
    }
};



auto init = []() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 0;
}();
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
