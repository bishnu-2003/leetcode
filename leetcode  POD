problem link : https://leetcode.com/problems/maximal-score-after-applying-k-operations/description/?envType=daily-question&envId=2024-10-14
solution ->

class Solution {
    public long maxKelements(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int n= nums.length;
        for(int i=0;i<n;i++){
            pq.offer(nums[i]);
        }
        long score=0;
        while(k>0){
            int val = pq.poll();
            score+=val;
            pq.offer((int)Math.ceil(val/3.0));
            k--;
        }
        return score;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/separate-black-and-white-balls
solution :
class Solution {
public:
    long long minimumSteps(string s) {
        long long swap = 0;
        int black = 0;
        for(int i = 0; i< s.length(); i++){
            if(s[i] == '0')
            swap += (long long) black;
            else
            black++;
        }
return swap;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/longest-happy-string
solution :
var longestDiverseString = function(a, b, c) {
    
    const pq = [];
    if (a > 0) pq.push([a, 'a']);
    if (b > 0) pq.push([b, 'b']);
    if (c > 0) pq.push([c, 'c']);
    pq.sort((x, y) => y[0] - x[0]);  // Sort in descending order.

    let result = "";

    while (pq.length > 0) {
        let [count1, char1] = pq.shift();

        if (result.length >= 2 && result[result.length - 1] === char1 && result[result.length - 2] === char1) {
            if (pq.length === 0) break;

            let [count2, char2] = pq.shift();
            result += char2;
            if (--count2 > 0) pq.push([count2, char2]);

            pq.push([count1, char1]);  // Push char1 back for later use.
        } else {
            result += char1;
            if (--count1 > 0) pq.push([count1, char1]);
        }

        pq.sort((x, y) => y[0] - x[0]);  // Sort after each modification.
    }

    return result;
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/maximum-swap
solution :class Solution {
public:
    int maximumSwap(int num) {
        string ans=to_string(num);
        int n=ans.size();
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++){
            v.push_back({ans[i]-'0',i});
        }
        sort(v.rbegin(),v.rend());
        int i=0,j=0;
        while(j<v.size()){
            auto p=v[j];
            j++;
            if(p.first==ans[i]-'0'){
                i++;
                continue;
            }
            break;
        }
        v={};
        int temp=i;
        while(i<n){
            v.push_back({ans[i]-'0',i});
            i++;
        }
        sort(v.rbegin(),v.rend());
        j=0;
        if(v.size()){
            swap(ans[temp],ans[v[j].second]);
        }
        return stoi(ans);
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets
solution : class Solution {
    public int countMaxOrSubsets(int[] nums) {
        //target or
        int targetOr=0;
        for(int num : nums){
            targetOr |= num;
        }
        //state: index,targetOr = 7
        Integer dp[][] = new Integer[nums.length][targetOr+1];
        return recur(0,nums,0,targetOr,dp);
    }
    // tc: n*targetOr
    // sc: n*targetOr
    public int recur(int index, int nums[], int curOr, int targetOr,Integer dp[][]){
        //base case
        if(index == nums.length){
            return (curOr == targetOr)?1:0;
        }
        //check if already solved
        if(dp[index][curOr]!=null){
            return dp[index][curOr];
        }
        // O(2^n)
        //pick
        int pickCount = recur(index+1, nums, curOr | nums[index], targetOr,dp);
        //no pick
        int noPickCount = recur(index+1, nums, curOr, targetOr,dp);
        return dp[index][curOr] = pickCount + noPickCount;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/find-kth-bit-in-nth-binary-string
solution :class Solution {
    public char findKthBit(int n, int k) {
        // Base case: When n = 1, the binary string is "0"
        if (n == 1) return '0';
        
        // Find the length of the current string Sn, which is 2^n - 1
        int length = (1 << n) - 1;
        
        // Find the middle position
        int mid = length / 2 + 1;
        
        // If k is the middle position, return '1'
        if (k == mid) return '1';
        
        // If k is in the first half, find the bit in Sn-1
        if (k < mid) return findKthBit(n - 1, k);
        
        // If k is in the second half, find the bit in Sn-1 and invert it
        return findKthBit(n - 1, length - k + 1) == '0' ? '1' : '0';
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/parsing-a-boolean-expression
solution : class Solution {
    public boolean parseBoolExpr(String expression) {
        // 2n
        Stack<Character> stack = new Stack<>();
        int n = expression.length();
        // n + n
        for(int i=0;i<n;i++){ //N
            char ch = expression.charAt(i);
            if(ch==')'){
                ArrayList<Character> list = new ArrayList<>();
                while(stack.peek()!='('){ //k
                    list.add(stack.pop());
                }
                stack.pop(); //remove '('
                char op = stack.pop();
                char ans = evaluate(list,op); //k
                stack.push(ans);
            }else{
                if(ch!=','){
                    stack.push(ch);
                }
            }
        }
        return stack.peek() == 't';
    }
    public char evaluate(ArrayList<Character> list ,char op){
        if(op == '&'){
            if(find(list,'f')){
                return 'f';
            }else{
                return 't';
            }
        } else if(op == '|'){
            if(find(list,'t')){
                return 't';
            }else{
                return 'f';
            }
        }else{ // not
            return (list.get(0)=='t'?'f':'t');
        }
    }
    public boolean find(ArrayList<Character> list ,char val){
        for(char ch : list){
            if(ch == val){
                return true;
            }
        }
        return false;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link:https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings
solution: class Solution {
    int maxCount;
    public int maxUniqueSplit(String s) {
        maxCount=0;
        HashSet<String>set = new HashSet<>();
        backtrack(s,set,0);
        return maxCount;
    }
    // tc: n * 2^n
    // sc: n substring
    public void backtrack(String s, HashSet<String> set, int index){
        //base case
        int n = s.length();
        if(index==n){
            maxCount = Math.max(maxCount,set.size());
            return;
        }
        //loop
        for(int i=index;i<n;i++){
            //check if substring is present in set or not
            String sub = s.substring(index,i+1);
            if(!set.contains(sub)){
                set.add(sub);
                backtrack(s,set,i+1);
                set.remove(sub);
            }
        }
    }
    
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree
solution link:/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {

        // BF
        // max heap
        //bfs - min heap.
        Queue<TreeNode> queue = new LinkedList<>();
        PriorityQueue<Long> pq = new PriorityQueue<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            long sum = 0l;
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                sum += node.val;
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            pq.offer(sum);
            if(pq.size()>k){
                pq.poll();
            }
        }
        //-1 case
        if(pq.size()<k){
            return -1;
        }
        return pq.peek();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/cousins-in-binary-tree-ii/submissions
solution : class Solution {
    public TreeNode replaceValueInTree(TreeNode root) {
        dfs(new TreeNode[] {root});
        root.val = 0;
        return root;
    }

    private void dfs(TreeNode[] arr) {
        if (arr.length == 0) return;

        int sum = 0;
        for (TreeNode node : arr) {
            if (node == null) continue;
            if (node.left != null) sum += node.left.val;
            if (node.right != null) sum += node.right.val;
        }

        TreeNode[] childArr = new TreeNode[arr.length * 2];
        int index = 0;

        for (TreeNode node : arr) {
            int curSum = 0;
            if (node.left != null) curSum += node.left.val;
            if (node.right != null) curSum += node.right.val;

            if (node.left != null) {
                node.left.val = sum - curSum;
                childArr[index++] = node.left;
            }
            if (node.right != null) {
                node.right.val = sum - curSum;
                childArr[index++] = node.right;
            }
        }

        dfs(java.util.Arrays.copyOf(childArr, index));
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/flip-equivalent-binary-trees
solution : class Solution {
    public boolean flipEquiv(TreeNode root1, TreeNode root2) {
        //base cases
        if(root1 == null && root2==null){
            return true;
        }
        if(root1 == null || root2==null){
            return false;
        }
        if(root1.val!=root2.val){
            return false;
        }
        //orignal
        boolean isSame = flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right);
        if(isSame){
            return true;
        }
        //flip
        return flipEquiv(root1.left, root2.right) && flipEquiv(root1.right, root2.left);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/remove-sub-folders-from-the-filesystem
solution : class Solution {
public:
    vector<string> removeSubfolders(vector<string>& folder) {
       
        sort(folder.begin(), folder.end());

        
        vector<string> ans;
        ans.push_back(folder[0]);

        
        for(int i = 1; i < folder.size(); i++) {
            
            string lastFolder = ans.back();
            lastFolder.push_back('/');

            
            if(folder[i].compare(0, lastFolder.size(), lastFolder) != 0) {
                
                ans.push_back(folder[i]);
            }
        }

        return ans;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries
solution link: // TypeScript ( copy solution becouse i want to improve my TS logic thats why i try this , just for testing)


// Function that processes queries about maximum heights in a binary tree excluding specific nodes
function treeQueries(root: TreeNode | null, queries: number[]): number[] {
    // Arrays to store various tree-related information
    const heights: number[] = new Array(50000).fill(0);  // Stores heights of leaf nodes
    const d: number[] = new Array(100001).fill(0);       // Stores depth of each node
    const l: number[] = new Array(100001).fill(0);       // Stores left boundary index for each node
    const r: number[] = new Array(100001).fill(0);       // Stores right boundary index for each node
    let len: number = 0;                                 // Counter for leaf nodes
    
    // DFS function to process the tree
    function search(p: TreeNode, h: number): void {
        // Store current node's depth
        d[p.val] = h;
        
        // If current node is a leaf node
        if (!p.left && !p.right) {
            heights[len] = h;           // Store its height
            l[p.val] = r[p.val] = len;  // Set left and right boundaries to current index
            len++;                      // Increment leaf counter
            return;
        }
        
        // Store left boundary for current node
        l[p.val] = len;
        
        // Recursively process left and right subtrees
        if (p.left) search(p.left, h + 1);
        if (p.right) search(p.right, h + 1);
        
        // Store right boundary for current node
        r[p.val] = len - 1;
    }
    
    // Handle empty tree case
    if (!root) return [];
    search(root, 0);
    
    const n: number = len;
    // Arrays to store maximum heights from left and right
    const maxl: number[] = new Array(n).fill(0);
    const maxr: number[] = new Array(n).fill(0);
    
    // Compute maximum heights from left to right and right to left
    for (let i = 1; i < n; i++) {
        maxl[i] = Math.max(maxl[i-1], heights[i-1]);     // Left to right maximums
        maxr[n-i-1] = Math.max(maxr[n-i], heights[n-i]); // Right to left maximums
    }
    
    // Process queries
    const ret: number[] = [];
    const k: number = queries.length;
    
    for (let i = 0; i < k; i++) {
        // For each query, find maximum height possible when removing the queried node
        const maxxl: number = maxl[l[queries[i]]];        // Max height to the left
        const maxxr: number = maxr[r[queries[i]]];        // Max height to the right
        // Result is maximum of:
        // 1. Maximum height to the left of node
        // 2. Maximum height to the right of node
        // 3. Node's depth minus 1 (representing parent's path)
        ret.push(Math.max(Math.max(maxxl, maxxr), d[queries[i]] - 1));
    }
    
    return ret;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/count-square-submatrices-with-all-ones
solution: class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
       
        int n = matrix.size();    // number of rows
        int m = matrix[0].size(); // number of columns
        
        // Create a DP table with same dimensions as matrix
        vector<vector<int>> dp(n, vector<int>(m, 0));
        
        // Variable to store total count of squares
        int ans = 0;
        
        // Initialize first column of DP table
        // Each cell in first column can only form a 1x1 square if matrix[i][0] = 1
        for (int i = 0; i < n; i++) {
            dp[i][0] = matrix[i][0];
            ans += dp[i][0];  // Add the count of squares from the first column
        }
        
        // Initialize first row of DP table
        // Each cell in first row can only form a 1x1 square if matrix[0][j] = 1
        for (int j = 1; j < m; j++) {
            dp[0][j] = matrix[0][j];
            ans += dp[0][j];  // Add the count of squares from the first row
        }
        
        // Fill the DP table for remaining cells
        for(int i = 1; i < n; i++) {
            for(int j = 1; j < m; j++) {
                // Only process if current cell in matrix is 1
                if(matrix[i][j] == 1) {
                    
                    dp[i][j] = 1 + min({dp[i][j-1], dp[i-1][j], dp[i-1][j-1]});
                } 
                
            
                ans += dp[i][j];
            }
        }
        
      
        return ans;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/longest-square-streak-in-an-array
solution : class Solution {
public:
    int longestSquareStreak(vector<int>& nums) {
        map<int, int>mp;
        sort(nums.begin(), nums.end());
        int res = -1;
        for(int num: nums) {
            int _sqrt = sqrt(num);
            if(_sqrt*_sqrt == num && mp.find(_sqrt)!=mp.end()) {
                mp[num] = mp[_sqrt]+1;
                res = max(res, mp[num]);
            } else mp[num] = 1;
        }
        return res;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/maximum-number-of-moves-in-a-grid
solution : class Solution {
    public int maxMoves(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        int maxMoves = 0;

        for (int col = n - 2; col >= 0; col--) {
            for (int row = 0; row < m; row++) {
                if (row > 0 && grid[row][col] < grid[row - 1][col + 1]) {
                    dp[row][col] = Math.max(dp[row][col], dp[row - 1][col + 1] + 1);
                }
                if (grid[row][col] < grid[row][col + 1]) {
                    dp[row][col] = Math.max(dp[row][col], dp[row][col + 1] + 1);
                }
                if (row < m - 1 && grid[row][col] < grid[row + 1][col + 1]) {
                    dp[row][col] = Math.max(dp[row][col], dp[row + 1][col + 1] + 1);
                }
            }
        }

        for (int row = 0; row < m; row++) {
            maxMoves = Math.max(maxMoves, dp[row][0]);
        }
        return maxMoves;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array
solution : class Solution {
    public int minimumMountainRemovals(int[] nums) {
        int n = nums.length;
        int[] LIS = new int[n], LDS = new int[n];
        Arrays.fill(LIS, 1);
        Arrays.fill(LDS, 1);

        // Compute LIS for each index
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[i] > nums[j]) {
                    LIS[i] = Math.max(LIS[i], LIS[j] + 1);
                }
            }
        }

        // Compute LDS from each index
        for (int i = n - 1; i >= 0; --i) {
            for (int j = n - 1; j > i; --j) {
                if (nums[i] > nums[j]) {
                    LDS[i] = Math.max(LDS[i], LDS[j] + 1);
                }
            }
        }

        int maxMountainLength = 0;

        // Find the maximum mountain length
        for (int i = 1; i < n - 1; ++i) {
            if (LIS[i] > 1 && LDS[i] > 1) {  // Valid peak
                maxMountainLength = Math.max(maxMountainLength, LIS[i] + LDS[i] - 1);
            }
        }

        return n - maxMountainLength;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
