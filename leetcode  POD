problem link : https://leetcode.com/problems/maximal-score-after-applying-k-operations/description/?envType=daily-question&envId=2024-10-14
solution ->

class Solution {
    public long maxKelements(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int n= nums.length;
        for(int i=0;i<n;i++){
            pq.offer(nums[i]);
        }
        long score=0;
        while(k>0){
            int val = pq.poll();
            score+=val;
            pq.offer((int)Math.ceil(val/3.0));
            k--;
        }
        return score;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/separate-black-and-white-balls
solution :
class Solution {
public:
    long long minimumSteps(string s) {
        long long swap = 0;
        int black = 0;
        for(int i = 0; i< s.length(); i++){
            if(s[i] == '0')
            swap += (long long) black;
            else
            black++;
        }
return swap;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/longest-happy-string
solution :
var longestDiverseString = function(a, b, c) {
    
    const pq = [];
    if (a > 0) pq.push([a, 'a']);
    if (b > 0) pq.push([b, 'b']);
    if (c > 0) pq.push([c, 'c']);
    pq.sort((x, y) => y[0] - x[0]);  // Sort in descending order.

    let result = "";

    while (pq.length > 0) {
        let [count1, char1] = pq.shift();

        if (result.length >= 2 && result[result.length - 1] === char1 && result[result.length - 2] === char1) {
            if (pq.length === 0) break;

            let [count2, char2] = pq.shift();
            result += char2;
            if (--count2 > 0) pq.push([count2, char2]);

            pq.push([count1, char1]);  // Push char1 back for later use.
        } else {
            result += char1;
            if (--count1 > 0) pq.push([count1, char1]);
        }

        pq.sort((x, y) => y[0] - x[0]);  // Sort after each modification.
    }

    return result;
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/maximum-swap
solution :class Solution {
public:
    int maximumSwap(int num) {
        string ans=to_string(num);
        int n=ans.size();
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++){
            v.push_back({ans[i]-'0',i});
        }
        sort(v.rbegin(),v.rend());
        int i=0,j=0;
        while(j<v.size()){
            auto p=v[j];
            j++;
            if(p.first==ans[i]-'0'){
                i++;
                continue;
            }
            break;
        }
        v={};
        int temp=i;
        while(i<n){
            v.push_back({ans[i]-'0',i});
            i++;
        }
        sort(v.rbegin(),v.rend());
        j=0;
        if(v.size()){
            swap(ans[temp],ans[v[j].second]);
        }
        return stoi(ans);
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
