problem link : https://leetcode.com/problems/maximal-score-after-applying-k-operations/description/?envType=daily-question&envId=2024-10-14
solution ->

class Solution {
    public long maxKelements(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int n= nums.length;
        for(int i=0;i<n;i++){
            pq.offer(nums[i]);
        }
        long score=0;
        while(k>0){
            int val = pq.poll();
            score+=val;
            pq.offer((int)Math.ceil(val/3.0));
            k--;
        }
        return score;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/separate-black-and-white-balls
solution :
class Solution {
public:
    long long minimumSteps(string s) {
        long long swap = 0;
        int black = 0;
        for(int i = 0; i< s.length(); i++){
            if(s[i] == '0')
            swap += (long long) black;
            else
            black++;
        }
return swap;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/longest-happy-string
solution :
var longestDiverseString = function(a, b, c) {
    
    const pq = [];
    if (a > 0) pq.push([a, 'a']);
    if (b > 0) pq.push([b, 'b']);
    if (c > 0) pq.push([c, 'c']);
    pq.sort((x, y) => y[0] - x[0]);  // Sort in descending order.

    let result = "";

    while (pq.length > 0) {
        let [count1, char1] = pq.shift();

        if (result.length >= 2 && result[result.length - 1] === char1 && result[result.length - 2] === char1) {
            if (pq.length === 0) break;

            let [count2, char2] = pq.shift();
            result += char2;
            if (--count2 > 0) pq.push([count2, char2]);

            pq.push([count1, char1]);  // Push char1 back for later use.
        } else {
            result += char1;
            if (--count1 > 0) pq.push([count1, char1]);
        }

        pq.sort((x, y) => y[0] - x[0]);  // Sort after each modification.
    }

    return result;
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/maximum-swap
solution :class Solution {
public:
    int maximumSwap(int num) {
        string ans=to_string(num);
        int n=ans.size();
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++){
            v.push_back({ans[i]-'0',i});
        }
        sort(v.rbegin(),v.rend());
        int i=0,j=0;
        while(j<v.size()){
            auto p=v[j];
            j++;
            if(p.first==ans[i]-'0'){
                i++;
                continue;
            }
            break;
        }
        v={};
        int temp=i;
        while(i<n){
            v.push_back({ans[i]-'0',i});
            i++;
        }
        sort(v.rbegin(),v.rend());
        j=0;
        if(v.size()){
            swap(ans[temp],ans[v[j].second]);
        }
        return stoi(ans);
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets
solution : class Solution {
    public int countMaxOrSubsets(int[] nums) {
        //target or
        int targetOr=0;
        for(int num : nums){
            targetOr |= num;
        }
        //state: index,targetOr = 7
        Integer dp[][] = new Integer[nums.length][targetOr+1];
        return recur(0,nums,0,targetOr,dp);
    }
    // tc: n*targetOr
    // sc: n*targetOr
    public int recur(int index, int nums[], int curOr, int targetOr,Integer dp[][]){
        //base case
        if(index == nums.length){
            return (curOr == targetOr)?1:0;
        }
        //check if already solved
        if(dp[index][curOr]!=null){
            return dp[index][curOr];
        }
        // O(2^n)
        //pick
        int pickCount = recur(index+1, nums, curOr | nums[index], targetOr,dp);
        //no pick
        int noPickCount = recur(index+1, nums, curOr, targetOr,dp);
        return dp[index][curOr] = pickCount + noPickCount;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/find-kth-bit-in-nth-binary-string
solution :class Solution {
    public char findKthBit(int n, int k) {
        // Base case: When n = 1, the binary string is "0"
        if (n == 1) return '0';
        
        // Find the length of the current string Sn, which is 2^n - 1
        int length = (1 << n) - 1;
        
        // Find the middle position
        int mid = length / 2 + 1;
        
        // If k is the middle position, return '1'
        if (k == mid) return '1';
        
        // If k is in the first half, find the bit in Sn-1
        if (k < mid) return findKthBit(n - 1, k);
        
        // If k is in the second half, find the bit in Sn-1 and invert it
        return findKthBit(n - 1, length - k + 1) == '0' ? '1' : '0';
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/parsing-a-boolean-expression
solution : class Solution {
    public boolean parseBoolExpr(String expression) {
        // 2n
        Stack<Character> stack = new Stack<>();
        int n = expression.length();
        // n + n
        for(int i=0;i<n;i++){ //N
            char ch = expression.charAt(i);
            if(ch==')'){
                ArrayList<Character> list = new ArrayList<>();
                while(stack.peek()!='('){ //k
                    list.add(stack.pop());
                }
                stack.pop(); //remove '('
                char op = stack.pop();
                char ans = evaluate(list,op); //k
                stack.push(ans);
            }else{
                if(ch!=','){
                    stack.push(ch);
                }
            }
        }
        return stack.peek() == 't';
    }
    public char evaluate(ArrayList<Character> list ,char op){
        if(op == '&'){
            if(find(list,'f')){
                return 'f';
            }else{
                return 't';
            }
        } else if(op == '|'){
            if(find(list,'t')){
                return 't';
            }else{
                return 'f';
            }
        }else{ // not
            return (list.get(0)=='t'?'f':'t');
        }
    }
    public boolean find(ArrayList<Character> list ,char val){
        for(char ch : list){
            if(ch == val){
                return true;
            }
        }
        return false;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
