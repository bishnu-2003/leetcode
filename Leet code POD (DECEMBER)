Problem link: https://leetcode.com/problems/check-if-n-and-its-double-exist
solution : 
          defmodule Solution do
  @spec check_if_exist(arr :: [integer]) :: boolean
  def check_if_exist(arr) do
    for {a, i} <- Enum.with_index(arr),
        {b, j} <- Enum.with_index(arr),
        i != j,
        a == b * 2,
        reduce: false,
        do: (_ -> true)
  end
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence
solution : class Solution {
public:
    int isPrefixOfWord(string sentence, string searchWord) {

        istringstream stream(sentence);
        string word;
        int index = 1; // 1-based index
        
        while (stream >> word) {
            
            if (word.find(searchWord) == 0) {
                return index;
            }
            index++;
        }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/adding-spaces-to-a-string
solution : /**
 * @param {string} s
 * @param {number[]} spaces
 * @return {string}
 */
var addSpaces = function(s, spaces) {
    let result = "";
    let sp = 0;
    for(let i = 0; i < s.length; i++){
        if (i != spaces[sp]){
            result += s[i];
        } else{
            result += ' ';
            result += s[i];
            sp += 1;
        }
    }
    return result;
};
        
        return -1;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link : https://leetcode.com/problems/make-string-a-subsequence-using-cyclic-increments
solution: const canMakeSubsequence = function(str1, str2) {
let p=0
let q=0

function lessChar (char){
if(char == 'a') return 'z'
return String.fromCharCode(char.charCodeAt(0)-1)
}

while(p<str1.length && q<str2.length){
    if (str1[p]==str2[q] || str1[p]== lessChar(str2[q])){
        q++
    }
    p++
}
return q== str2.length
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem link: https://leetcode.com/problems/move-pieces-to-obtain-a-string
solution : 

const canChange = function(start, target) {
    if (start === target) return true;
    let waitL = 0, waitR = 0;
    
    for (let i = 0; i < start.length; i++) {
        const curr = start[i];
        const goal = target[i];
        
        if (curr === 'R') {
            if (waitL > 0) return false;
            waitR++;
        }
        if (goal === 'L') {
            if (waitR > 0) return false;
            waitL++;
        }
        if (goal === 'R') {
            if (waitR === 0) return false;
            waitR--;
        }
        if (curr === 'L') {
            if (waitL === 0) return false;
            waitL--;
        }
    }
    return waitL === 0 && waitR === 0;
};
*******************************************************************************************************************************************************************
problem link: https://leetcode.com/problems/maximum-number-of-integers-to-choose-from-a-range-i
solution : class Solution {
public:
    int maxCount(vector<int>& banned, int n, int maxSum) {
        unordered_set<int> ans(banned.begin(),banned.end());//to check in O(1) complexity if range of number is in banned or not
        int count=0;  //For counting integers
        int sum=0;  //to check the sum exceed or not
        int i=1; //For the Range of number
        while(i<=n&&sum+i<=maxSum){
            if(ans.find(i)==ans.end()){
                cout<<i<<endl;
                count++;
                sum+=i;
            }
            i++;
        }
        return count;
    }
};
*******************************************************************************************************************************************************************
problem link: https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag
solution: 

function minimumSize(n: number[], maxOps: number): number {
    let low = 1;
    let high = Math.max(...n);
    while (low < high) {
        const mid = (low + high) >> 1;
        let cnt = 0;
        for (const x of n) {
            cnt += ~~((x - 1) / mid);
        }
        if (cnt <= maxOps) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }
    return low;
}

